user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 8120; ## 4096;     ## worker_connections * 2 file descriptors

events {
    worker_connections 4096; ## 2048;  ## Default: 1024
}

http {
    include       /etc/nginx/mime.types;
    include       conf.d/variables.conf;        # variables defineds via automatic envsubs from nginx template
    default_type  application/octet-stream;

    log_format json_analytics escape=json '{'
                    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                    '"connection": "$connection", ' # connection serial number
                    '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$http_x_real_ip", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    # '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio", '
                    '"http_cf_ray": "$http_cf_ray",'
                    # '"geoip_country_code": "$geoip_country_code"'
                    '}';

    access_log  /var/log/nginx/access.log  json_analytics;

    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    map $http_user_agent $blocked_ua {
        default 0;
        "~*(htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw)" 1;
        "~*(facebookexternalhit|PetalBot)" 1;
    }

    # Define the rate limit zone using the mapped real IP
    limit_req_zone $http_x_real_ip zone=ratelimit:10m rate=10r/s;
    limit_req_status 429;  # Too many requests

    server {
        listen 80;
        listen [::]:80;

        index index.php;

        root /app/public;

        server_tokens off;
        # Security Headers
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Set-Cookie "Path=/; HttpOnly; Secure";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header Referrer-Policy: no-referrer-when-downgrade;
        add_header Content-Security-Policy: "default-src 'self'; frame-src http: data:; media-src http: data:; connect-src http: data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' http:; style-src 'unsafe-inline' http:; img-src http: data:; font-src http: data:";
        add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";

        location / {
            # Apply the rate limit
            limit_req zone=ratelimit nodelay;

            # Check for blocked user agents
            if ($blocked_ua) {
                return 403; # Forbidden
            }

            # If the requested URI exists as a file serve as static file
            if (-f $request_filename) {
                break;
            }

            # Extract the instance directory from the URL
            set $instance_dir "";
            if ($uri ~ ^/([^/]+)) {
                 set $instance_dir $1;
            }

            # Check if the directory exists
            set $dir_check "";
            if (-d /app/instances/$instance_dir) {
                set $dir_check 1;
            }

            # Redirect to VHL main portal if the instance directory does not exist
            if ($dir_check = "") {
                return 307 https://bvsalud.org/;
                break;
            }

            # Rewrite the uri from /instance/index.php to /index.php/instance/
            rewrite ^ /index.php/$instance_dir/$is_args$args;
        }

        location /index.php {
            # Conditionally enable authentication based on the $auth_enable variable
            auth_basic $auth_enable;
            auth_basic_user_file /etc/nginx/.htpasswd;

            fastcgi_pass unix:/var/run/php-fpm.sock;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;
            fastcgi_param PATH_INFO $fastcgi_path_info;

            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;

            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;

            internal;

            send_timeout 60;

            keepalive_timeout  30;
            client_body_timeout 30;
            client_max_body_size 100m;

            fastcgi_read_timeout 600;
            fastcgi_connect_timeout 30;
            fastcgi_send_timeout 30;
        }

        location ~ /\.ht {
                deny all;
        }

        # return 404 for all other php files not matching the front controller
        # this prevents access to other php files you don't want to be accessible.
        location ~ \.php$ {
            return 404;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

        location ~* \.(css|gif|ico|jpeg|jpg|js|png|svg)$ {
            expires max;
            log_not_found off;
            access_log off;
        }

        # disabled project with WHO - redirect all requests to a info page
        location ~ ^/global-literature-on-novel-coronavirus-2019-ncov/(.*)$ {
            return 301 https://www.who.int/emergencies/diseases/novel-coronavirus-2019/global-research-on-novel-coronavirus-2019-ncov;
            log_not_found off;
            access_log off;
        }


    }

    #include /etc/nginx/conf.d/*.conf;

}
