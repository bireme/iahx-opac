# DEV

## Setup inicial do ambiente

1. Rodar docker-compose-dev com entrypoint de loop:
    entrypoint: ["tail", "-f", "/dev/null"]

2. Realizar acesso ssh ao container em execução e instalar pacotes do composer
    cd /app
    composer install


2. Realizar acesso ssh ao container em execução e instalar pacotes do symfony

    cd /app
    composer create-project symfony/skeleton:"7.0.*" .
    composer require webapp
    composer require twig

3. Alterar entrypoint para PHP Development Server:

    entrypoint: ["php", "-S", "0.0.0.0:8080", "-t", "/app/public"]


## Pacotes adicionais

  * MobileDetectPHP 4.8.x (https://docs.mobiledetect.net/home)

    $ composer require mobiledetect/mobiledetectlib


## Atualização de pacotes e do framework

    composer update
    * caso não funcione o update renomear o arquivo composer.lock e rodar novamente 'composer update'


## Outros comandos que podem ser executados no container em execução:

    * instalar pacote
    composer install

    * remover um pacote
    composer remove webapp

    * atualizar pacotes
    composer update

    * limpar cache
    php bin/console cache:clear

    * realizar debug
    php bin/console debug:router

## Cache (REDIS)

    $ make dev_sh_cache
    $ redis-cli

    127.0.0.1:6379> info memory   --- verifica memoria utilizada
    127.0.0.1:6379> keys *        --- lista chaves
    127.0.0.1:6379> get [KEY]     --- conteúdo da chave
    127.0.0.1:6379> type [KEY]    --- tipo da cheave


## Deploy produção (sem docker)

    1. Clone do repositorio

        git clone --recurse-submodules https://github.com/bireme/iahx-opac.git portal

    2. Alterar branch para main (3.0)

        git checkout main

    3. Clone do submodule e ajuste branch

        git submodule init
        git submodule update
        cd instances
        git checkout main


    3. Instalar composer no diretório bin/

        https://getcomposer.org/download/

    4. Instalar Symfony e dependências

        bin/composer install --no-dev --optimize-autoloader

    5. Criar .env.prod
    APP_ENV=prod
    APP_SECRET=[https://nux.net/secret]

    5. gerar .env

        bin/composer dump-env prod

    6. Gerar assets

        php bin/console asset-map:compile


## Documentação

    * https://symfony.com/doc/current/setup/web_server_configuration.html

    * https://github.com/symfony/demo/blob/main/src/Controller/BlogController.php

    * https://symfony.com/doc/current/service_container.html

    * https://twig.symfony.com/doc/3.x/advanced.html

    * https://symfony.com/doc/current/reference/dic_tags.html#twig-extension

    * https://symfony.com/doc/current/frontend.html

    * https://symfony.com/doc/current/frontend/asset_mapper.html

    * https://github.com/bitnami/containers/tree/main/bitnami/php-fpm#how-to-use-this-image

    * https://aicha-fatrah.medium.com/dockerize-a-symfony-project-nginx-php-fpm-and-mariadb-f46fe9b190bb


